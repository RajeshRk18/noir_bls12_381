use dep::std::println;
use crate::field::prime_field::PrimeField as Fp;

// An element of Fp2 is respresented by c0 + c1 * u
struct Fp2 {
    c0: Fp,
    c1: Fp,
}

// Fp2 tower extension impl
impl Fp2 {
    fn new(c0: Fp, c1: Fp) -> Self {
        Fp2{
            c0,
            c1,
        }
    }

    fn zero() -> Fp2 {
        Fp2{
            c0: Fp::zero(),
            c1: Fp::zero(),
        }
    }

    fn one() -> Fp2 {
        Fp2{
            c0: Fp::one(),
            c1: Fp::zero(),
        }
    }

    fn add(self: Self, other: Self) -> Self {
        Self{
            c0: self.c0.add(other.c0),
            c1: self.c1.add(other.c1),
        }
    }

    fn sub(self: Self, other: Self) -> Self {
        Self{
            c0: self.c0.sub(other.c0),
            c1: self.c1.sub(other.c1),
        }
    }

    fn mul(self: Self, other: Self) -> Self {
        let t1 = self.c0.mul(other.c0);
        let t0 = self.c0.add(self.c1);
        let t2 = self.c1.mul(other.c1);
        let c1 = other.c0.add(other.c1);
        let c0 = t1.sub(t2);
        let t1 = t1.add(t2);
        let t0 = t0.mul(c1);
        let c1 = t0.sub(t1);

        Self{
            c0,
            c1,
        }
    }

    fn double(self: Self) -> Self {
        Self {
            c0: self.c0.double(),
            c1: self.c1.double(),
        }
    }

    fn square(self: Self) -> Self {
        let ab = self.c0.mul(self.c1);
        let c0c1 = self.c0.add(self.c1);
        let c0 = self.c1.neg();
        let c0 = c0.add(self.c0);
        let c0 = c0.mul(c0c1);
        let c0 = c0.sub(ab);

        Self {
            c0: c0.add(ab),
            c1: ab.double(),
        }
    }

    fn neg(self: Self) -> Self {
        Self {
            c0: self.c0.neg(),
            c1: self.c1.neg(),
        }
    }

    // conjugate by negating c1
    fn conjugate(self: Self) -> Self {
        Self {
            c0: self.c0,
            c1: self.c1.neg(),
        }
    }

    fn eq(self: Self, other: Self) -> bool {
        self.c0.eq(other.c0) & self.c1.eq(other.c1)
    }
    
    fn is_zero(self: Self) -> bool {
        self.c0.is_zero() & self.c1.is_zero()
    }

    fn is_one(self: Self) -> bool {
        self.c0.is_one() & self.c1.is_zero()
    }

    // Algorithm 7 from: https://eprint.iacr.org/2010/354.pdf
    fn mul_by_b0(self: Self, b0: Fp) -> Self {
        let c0 = self.c0.mul(b0);
        let c1 = self.c1.mul(b0);

        Self{
            c0,
            c1,
        }
    }

    // Algorithm 8 from: https://eprint.iacr.org/2010/354.pdf
    fn invert(self: Self) -> Self {
        let t0 = self.c0.mul(self.c0);
        let t1 = self.c1.mul(self.c1);
        let t0 = t0.add(t1);
        let t1 = t0.invert();
        let c0 = t1.mul(self.c0);
        let c1 = self.c1.mul(t1);
        let c1 = c1.neg();

        Self {
            c0,
            c1,
        }
    }

    // Multiply this element by quadratic nonresidue 1 + u
    fn mul_by_nonresidue(self: Self) -> Self {

        let c0 = self.c0.sub(self.c1);
        let c1 = self.c0.add(self.c1);

        Self{
            c0,
            c1,
        }
    }

    // Those values starting from mul_by_non_residue_(1-3)_power(1-5)
    // https://github.com/keep-starknet-strange/garaga/blob/main/src/bls12_381/towers/e2.cairo#L283
    // 3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760
    // 151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027

    fn mul_by_non_residue_1_power_1(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0xb8, 0x5f, 0x23, 0x92, 0xed, 0x75, 0x07, 0x8d,
                0x3d, 0x81, 0xe7, 0x63, 0x3d, 0xa5, 0x7e, 0xf6,
                0xc4, 0xb9, 0xba, 0x84, 0xd7, 0x43, 0x24, 0x7b,
                0x4f, 0x5f, 0xbd, 0x3c, 0xfd, 0x03, 0xd6, 0x0f,
                0x1f, 0x0d, 0x2c, 0x20, 0xb4, 0xbe, 0x31, 0xc2,
                0x67, 0x06, 0xbb, 0x02, 0xbf, 0xd3, 0x04, 0x19
            ]),
            Fp::from_bytes([
                0xf3, 0x4a, 0xdc, 0x6d, 0x12, 0x8a, 0xf7, 0x2c,
                0xc2, 0x7e, 0x6c, 0x4d, 0xc1, 0x5a, 0x2d, 0x28,
                0x5f, 0x3c, 0xf6, 0x71, 0xc9, 0x8e, 0x0c, 0xec,
                0x6f, 0xb3, 0xc7, 0xb6, 0x87, 0x47, 0xa1, 0x54,
                0xb8, 0x9f, 0x1f, 0x23, 0x02, 0xe9, 0xe9, 0x88,
                0x32, 0xe0, 0xc4, 0x36, 0x2b, 0x3e, 0xfc
            ])
        );
        self.mul(y)
    }

    // 0
    // 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436

    fn mul_by_non_residue_1_power_2(self: Self) -> Self {
        let y = Fp2::new(
            Fp::zero(),
            Fp::from_bytes([
               0xac, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x8b,
               0xfd, 0xff, 0x49, 0x4f, 0xeb, 0x27, 0x94, 0x40,
               0x9b, 0x5f, 0xb8, 0x0f, 0x65, 0x29, 0x7d, 0x89,
               0xd4, 0x9a, 0x75, 0x89, 0x7d, 0x85, 0x0d, 0xaa,
               0x85, 0xde, 0xd4, 0x63, 0x86, 0x40, 0x02, 0xec,
               0x99, 0xe6, 0x7f, 0x39, 0xea, 0x11, 0x01, 0x1a
            ])
        );
        self.mul(y)
    }

    // 1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257
    // 1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257

    fn mul_by_non_residue_1_power_3(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x09, 0xcc, 0xe3, 0xed, 0xfb, 0x84, 0x10, 0xc8,
                0xf4, 0x05, 0xec, 0x72, 0x2f, 0x99, 0x67, 0xee,
                0xc5, 0x41, 0x92, 0x00, 0x17, 0x6e, 0xf7, 0x77,
                0x5e, 0x43, 0xd3, 0xc2, 0xab, 0x5d, 0x39, 0x48,
                0xfe, 0x7f, 0xd1, 0x6b, 0x6d, 0xe3, 0x31, 0x68,
                0x0b, 0x40, 0xff, 0x37, 0x04, 0x0e, 0xaf, 0x06
            ]),
            Fp::from_bytes([
                0x09, 0xcc, 0xe3, 0xed, 0xfb, 0x84, 0x10, 0xc8,
                0xf4, 0x05, 0xec, 0x72, 0x2f, 0x99, 0x67, 0xee,
                0xc5, 0x41, 0x92, 0x00, 0x17, 0x6e, 0xf7, 0x77,
                0x5e, 0x43, 0xd3, 0xc2, 0xab, 0x5d, 0x39, 0x48,
                0xfe, 0x7f, 0xd1, 0x6b, 0x6d, 0xe3, 0x31, 0x68,
                0x0b, 0x40, 0xff, 0x37, 0x04, 0x0e, 0xaf, 0x06
            ])
        );
        self.mul(y)
    }

    // 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437
    // mul_by_b0
    fn mul_by_non_residue_1_power_4(self: Self) -> Self {
        let y = Fp::from_bytes([
            0xad, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x8b,
            0xfd, 0xff, 0x49, 0x4f, 0xeb, 0x27, 0x94, 0x40,
            0x9b, 0x5f, 0xb8, 0x0f, 0x65, 0x29, 0x7d, 0x89,
            0xd4, 0x9a, 0x75, 0x89, 0x7d, 0x85, 0x0d, 0xaa,
            0x85, 0xde, 0xd4, 0x63, 0x86, 0x40, 0x02, 0xec,
            0x99, 0xe6, 0x7f, 0x39, 0xea, 0x11, 0x01, 0x1a
        ]);
        self.mul_by_b0(y)
    }

    // 877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230
    // 3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557
    fn mul_by_non_residue_1_power_5(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x16, 0x81, 0x07, 0x80, 0xe9, 0xfa, 0x18, 0x9b,
                0x32, 0x87, 0x7f, 0x25, 0x6e, 0x3e, 0x3a, 0xc6,
                0x66, 0x05, 0x9c, 0x8e, 0x4d, 0xdf, 0xea, 0x8b,
                0xee, 0x8f, 0x0b, 0x0c, 0x24, 0x16, 0x98, 0xf3,
                0x45, 0xe0, 0xb1, 0x48, 0x6b, 0xfa, 0x47, 0xdf,
                0xd8, 0x5f, 0x3a, 0x01, 0xd9, 0xcf, 0xb2, 0x05
            ]),
            Fp::from_bytes([
                0x95, 0x29, 0xf8, 0x7f, 0x16, 0x05, 0xe6, 0x1e,
                0xcd, 0x78, 0xd4, 0x8b, 0x90, 0xc1, 0x71, 0x58,
                0xbd, 0xf0, 0x14, 0x68, 0x53, 0xf3, 0x45, 0xdb,
                0xd0, 0x82, 0x79, 0xe7, 0x60, 0x35, 0xdf, 0x70,
                0x91, 0xcc, 0x99, 0xfa, 0x4a, 0xad, 0xd3, 0x6b,
                0xc1, 0x86, 0x45, 0x38, 0x11, 0x42, 0x4e, 0x14
            ])
        );
        self.mul(y)
    }

    // 793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351
    fn mul_by_non_residue_2_power_1(self: Self) -> Self {
        let y = Fp::from_bytes([
            0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0x01, 0x2e,
            0x02, 0x00, 0x0a, 0x62, 0x13, 0xd8, 0x17, 0xde,
            0x88, 0x96, 0xf8, 0xe6, 0x3b, 0xa9, 0xb3, 0xdd,
            0xea, 0x77, 0x0f, 0x6a, 0x07, 0xc6, 0x69, 0xba,
            0x51, 0xce, 0x76, 0xdf, 0x2f, 0x67, 0x19, 0x5f
        ]);
        self.mul_by_b0(y)
    }

    // 793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350
    fn mul_by_non_residue_2_power_2(self: Self) -> Self {
        let y = Fp::from_bytes([
            0xfe, 0xff, 0xfe, 0xff, 0xff, 0xff, 0x01, 0x2e,
            0x02, 0x00, 0x0a, 0x62, 0x13, 0xd8, 0x17, 0xde,
            0x88, 0x96, 0xf8, 0xe6, 0x3b, 0xa9, 0xb3, 0xdd,
            0xea, 0x77, 0x0f, 0x6a, 0x07, 0xc6, 0x69, 0xba,
            0x51, 0xce, 0x76, 0xdf, 0x2f, 0x67, 0x19, 0x5f
        ]);
        self.mul_by_b0(y)
    }

    // 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786
    fn mul_by_non_residue_2_power_3(self: Self) -> Self {
        let y = Fp::from_bytes([
            0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xb9,
            0xff, 0xff, 0x53, 0xb1, 0xfe, 0xff, 0xab, 0x1e,
            0x24, 0xf6, 0xb0, 0xf6, 0xa0, 0xd2, 0x30, 0x67,
            0xbf, 0x12, 0x85, 0xf3, 0x84, 0x4b, 0x77 ,0x64,
            0xd7, 0xac, 0x4b, 0x43, 0xb6, 0xa7, 0x1b, 0x4b,
            0x9a, 0xe6, 0x7f, 0x39, 0xea, 0x11, 0x01, 0x1a

        ]);
        self.mul_by_b0(y)
    }

    // 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436
    fn mul_by_non_residue_2_power_4(self: Self) -> Self {
        let y = Fp::from_bytes([
            0xac, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x8b,
            0xfd, 0xff, 0x49, 0x4f, 0xeb, 0x27, 0x94, 0x40,
            0x9b, 0x5f, 0xb8, 0x0f, 0x65, 0x29, 0x7d, 0x89,
            0xd4, 0x9a, 0x75, 0x89, 0x7d, 0x85, 0x0d, 0xaa,
            0x85, 0xde, 0xd4, 0x63, 0x86, 0x40 ,0x02, 0xec,
            0x99, 0xe6, 0x7f, 0x39, 0xea, 0x11, 0x01, 0x1a

        ]);
        self.mul_by_b0(y)
    }

    // 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437
    fn mul_by_non_residue_2_power_5(self: Self) -> Self {
        let y = Fp::from_bytes([
            0xad, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x8b,
            0xfd, 0xff, 0x49, 0x4f, 0xeb, 0x27, 0x94, 0x40,
            0x9b, 0x5f, 0xb8, 0x0f, 0x65, 0x29, 0x7d, 0x89,
            0xd4, 0x9a, 0x75, 0x89, 0x7d, 0x85, 0x0d, 0xaa,
            0x85, 0xde, 0xd4, 0x63, 0x86, 0x40 ,0x02, 0xec,
            0x99, 0xe6, 0x7f, 0x39, 0xea, 0x11, 0x01, 0x1a
        ]);
        self.mul_by_b0(y)
    }

    // Calculated by using gnark and garaga
    // https://github.com/Consensys/gnark-crypto/blob/6652a8b98254de388446e9d35587965f9466ab0d/ecc/bls12-381/internal/fptower/frobenius.go#L222
    // https://github.com/keep-starknet-strange/garaga/blob/86a0ba5e8a1a38cdc933105ffb80dbfe45b813f3/tools/py/extension_trick.py#L129-L172
    // (2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530, 1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257)
    fn mul_by_non_residue_3_power_1(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0xa2, 0xde, 0x1b, 0x12, 0x04, 0x7b, 0xee, 0xf1,
                0x0a, 0xfa, 0x67, 0x3e, 0xcf, 0x66, 0x44, 0x30,
                0x5e, 0xb4, 0x1e, 0xf6, 0x89, 0x64, 0x39, 0xef,
                0x60, 0xcf, 0xb1, 0x30, 0xd9, 0xed, 0x3d, 0x1c,
                0xd9, 0x2c, 0x7a, 0xd7, 0x48, 0xc4, 0xe9 ,0xe2,
                0x8e, 0xa6, 0x80, 0x01, 0xe6, 0x03, 0x52, 0x13

            ]),
            Fp::from_bytes([
                0x09, 0xcc, 0xe3, 0xed, 0xfb, 0x84, 0x10, 0xc8,
                0xf4, 0x05, 0xec, 0x72, 0x2f, 0x99, 0x67, 0xee,
                0xc5, 0x41, 0x92, 0x00, 0x17, 0x6e, 0xf7, 0x77,
                0x5e, 0x43, 0xd3, 0xc2, 0xab, 0x5d, 0x39, 0x48,
                0xfe, 0x7f, 0xd1, 0x6b, 0x6d, 0xe3, 0x31, 0x68,
                0x0b, 0x40, 0xff, 0x37, 0x04, 0x0e, 0xaf, 0x06
            ])
        );
        self.mul(y)
    }

    //(0, 1)
    fn mul_by_non_residue_3_power_2(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_u56(0),
            Fp::from_u56(1)
        );
        self.mul(y)
    }

    // (2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530, 2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530)
    fn mul_by_non_residue_3_power_3(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0xa2, 0xde, 0x1b, 0x12, 0x04, 0x7b, 0xee, 0xf1,
                0x0a, 0xfa, 0x67, 0x3e, 0xcf, 0x66, 0x44, 0x30,
                0x5e, 0xb4, 0x1e, 0xf6, 0x89, 0x64, 0x39, 0xef,
                0x60, 0xcf, 0xb1, 0x30, 0xd9, 0xed, 0x3d, 0x1c,
                0xd9, 0x2c, 0x7a, 0xd7, 0x48, 0xc4, 0xe9 ,0xe2,
                0x8e, 0xa6, 0x80, 0x01, 0xe6, 0x03, 0x52, 0x13
            ]),
            Fp::from_bytes([
                0xa2, 0xde, 0x1b, 0x12, 0x04, 0x7b, 0xee, 0xf1,
                0x0a, 0xfa, 0x67, 0x3e, 0xcf, 0x66, 0x44, 0x30,
                0x5e, 0xb4, 0x1e, 0xf6, 0x89, 0x64, 0x39, 0xef,
                0x60, 0xcf, 0xb1, 0x30, 0xd9, 0xed, 0x3d, 0x1c,
                0xd9, 0x2c, 0x7a, 0xd7, 0x48, 0xc4, 0xe9 ,0xe2,
                0x8e, 0xa6, 0x80, 0x01, 0xe6, 0x03, 0x52, 0x13
            ])
        );
        self.mul(y)
    }

    // (4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786, 0)
    // mul_by_b0
    fn mul_by_non_residue_3_power_4(self: Self) -> Self {
        let y = Fp::from_bytes([
            0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xb9,
            0xff, 0xff, 0x53, 0xb1, 0xfe, 0xff, 0xab, 0x1e,
            0x24, 0xf6, 0xb0, 0xf6, 0xa0, 0xd2, 0x30, 0x67,
            0xbf, 0x12, 0x85, 0xf3, 0x84, 0x4b, 0x77, 0x64,
            0xd7, 0xac, 0x4b, 0x43, 0xb6, 0xa7, 0x1b, 0x4b,
            0x9a, 0xe6, 0x7f, 0x39, 0xea, 0x11, 0x01, 0x1a
        ]);
        self.mul_by_b0(y)
    }

    //(1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257, 2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530)
    fn mul_by_non_residue_3_power_5(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x09, 0xcc, 0xe3, 0xed, 0xfb, 0x84, 0x10, 0xc8,
                0xf4, 0x05, 0xec, 0x72, 0x2f, 0x99, 0x67, 0xee,
                0xc5, 0x41, 0x92, 0x00, 0x17, 0x6e, 0xf7, 0x77,
                0x5e, 0x43, 0xd3, 0xc2, 0xab, 0x5d, 0x39, 0x48,
                0xfe, 0x7f, 0xd1, 0x6b, 0x6d, 0xe3, 0x31, 0x68,
                0x0b, 0x40, 0xff, 0x37, 0x04, 0x0e, 0xaf, 0x06
            ]),
            Fp::from_bytes([
                0xa2, 0xde, 0x1b, 0x12, 0x04, 0x7b, 0xee, 0xf1,
                0x0a, 0xfa, 0x67, 0x3e, 0xcf, 0x66, 0x44, 0x30,
                0x5e, 0xb4, 0x1e, 0xf6, 0x89, 0x64, 0x39, 0xef,
                0x60, 0xcf, 0xb1, 0x30, 0xd9, 0xed, 0x3d, 0x1c,
                0xd9, 0x2c, 0x7a, 0xd7, 0x48, 0xc4, 0xe9 ,0xe2,
                0x8e, 0xa6, 0x80, 0x01, 0xe6, 0x03, 0x52, 0x13
            ])
        );
        self.mul(y)
    }
}
